# Dockerfile
# Multi-stage build for P.O.C.E. Project Creator v4.0
# Optimized for production deployment with security hardening

# ==========================================
# STAGE 1: BUILD ENVIRONMENT
# ==========================================
FROM python:3.11-slim-bullseye AS builder

# Set build arguments
ARG BUILD_DATE
ARG VERSION=4.0.0
ARG VCS_REF

# Add metadata labels
LABEL maintainer="POCE DevOps Team"
LABEL org.opencontainers.image.created=$BUILD_DATE
LABEL org.opencontainers.image.version=$VERSION
LABEL org.opencontainers.image.revision=$VCS_REF
LABEL org.opencontainers.image.title="P.O.C.E. Project Creator"
LABEL org.opencontainers.image.description="Advanced DevOps automation tool with MCP server integration"
LABEL org.opencontainers.image.vendor="P.O.C.E. Technologies"
LABEL org.opencontainers.image.licenses="MIT"

# Set environment variables for build optimization
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PIP_NO_CACHE_DIR=1
ENV PIP_DISABLE_PIP_VERSION_CHECK=1

# Install system dependencies for building
RUN apt-get update && apt-get install -y --no-install-recommends \
    build-essential \
    gcc \
    g++ \
    git \
    curl \
    pkg-config \
    libffi-dev \
    libssl-dev \
    && rm -rf /var/lib/apt/lists/*

# Create build directory
WORKDIR /build

# Copy requirements first for better layer caching
COPY requirements.txt requirements-prod.txt ./

# Create virtual environment and install dependencies
RUN python -m venv /opt/venv
ENV PATH="/opt/venv/bin:$PATH"

# Upgrade pip and install dependencies
RUN pip install --upgrade pip setuptools wheel && \
    pip install --no-cache-dir -r requirements-prod.txt

# Copy source code
COPY src/ ./src/
COPY setup.py setup.cfg pyproject.toml ./
COPY README.md LICENSE CHANGELOG.md ./

# Build the application
RUN pip install --no-cache-dir -e .

# ==========================================
# STAGE 2: RUNTIME ENVIRONMENT
# ==========================================
FROM python:3.11-slim-bullseye AS runtime

# Set runtime arguments
ARG USER_ID=1000
ARG GROUP_ID=1000
ARG APP_USER=poceuser

# Runtime environment variables
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV PYTHONPATH=/app
ENV PATH="/opt/venv/bin:$PATH"
ENV POCE_CONFIG_PATH=/app/config
ENV POCE_DATA_PATH=/app/data
ENV POCE_LOGS_PATH=/app/logs

# Install runtime system dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    # GUI dependencies for X11 forwarding
    x11-apps \
    x11-utils \
    xvfb \
    # Networking and security tools
    curl \
    wget \
    ca-certificates \
    gnupg \
    # Process management
    supervisor \
    # Git for repository operations
    git \
    # Health check utilities
    procps \
    && rm -rf /var/lib/apt/lists/*

# Create application user for security
RUN groupadd -g $GROUP_ID $APP_USER && \
    useradd -u $USER_ID -g $GROUP_ID -m -s /bin/bash $APP_USER

# Create application directories
RUN mkdir -p /app/{src,config,data,logs,temp} && \
    chown -R $APP_USER:$APP_USER /app

# Copy virtual environment from builder stage
COPY --from=builder /opt/venv /opt/venv

# Copy application files
COPY --chown=$APP_USER:$APP_USER poce_project_creator_v4.py /app/
COPY --chown=$APP_USER:$APP_USER poce_config.yaml /app/config/
COPY --chown=$APP_USER:$APP_USER docker/entrypoint.sh /app/
COPY --chown=$APP_USER:$APP_USER docker/healthcheck.sh /app/
COPY --chown=$APP_USER:$APP_USER docker/supervisord.conf /app/config/

# Make scripts executable
RUN chmod +x /app/entrypoint.sh /app/healthcheck.sh

# Set working directory
WORKDIR /app

# Switch to non-root user
USER $APP_USER

# Expose application port (if running web interface)
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=40s --retries=3 \
    CMD /app/healthcheck.sh || exit 1

# Default command
ENTRYPOINT ["/app/entrypoint.sh"]
CMD ["gui"]

# ==========================================
# STAGE 3: DEVELOPMENT ENVIRONMENT
# ==========================================
FROM runtime AS development

# Switch back to root for dev tools installation
USER root

# Install development dependencies
RUN apt-get update && apt-get install -y --no-install-recommends \
    vim \
    nano \
    htop \
    tree \
    ssh \
    rsync \
    && rm -rf /var/lib/apt/lists/*

# Install development Python packages
COPY requirements-dev.txt /tmp/
RUN pip install --no-cache-dir -r /tmp/requirements-dev.txt

# Switch back to app user
USER $APP_USER

# Development command
CMD ["development"]

# ==========================================
# DOCKER COMPOSE CONFIGURATION
# ==========================================
---
# docker-compose.yml
version: '3.8'

services:
  # Main P.O.C.E. application
  poce-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: runtime
      args:
        BUILD_DATE: ${BUILD_DATE:-$(date -u +'%Y-%m-%dT%H:%M:%SZ')}
        VERSION: ${VERSION:-4.0.0}
        VCS_REF: ${VCS_REF:-$(git rev-parse --short HEAD)}
    image: poce/project-creator:${VERSION:-latest}
    container_name: poce-creator
    restart: unless-stopped
    
    # Environment configuration
    environment:
      - POCE_MODE=${POCE_MODE:-production}
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - SMITHERY_API_KEY=${SMITHERY_API_KEY}
      - POCE_LOG_LEVEL=${POCE_LOG_LEVEL:-INFO}
      - DISPLAY=${DISPLAY:-:0}
    
    # Volume mounts
    volumes:
      - ./config:/app/config:ro
      - ./data:/app/data
      - ./logs:/app/logs
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
      - ~/.gitconfig:/home/poceuser/.gitconfig:ro
    
    # Network configuration
    ports:
      - "8080:8080"
    
    # Resource limits
    deploy:
      resources:
        limits:
          cpus: '2.0'
          memory: 4G
        reservations:
          cpus: '0.5'
          memory: 1G
    
    # Health check
    healthcheck:
      test: ["CMD", "/app/healthcheck.sh"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    
    # Dependencies
    depends_on:
      - redis
      - postgres
    
    # Networks
    networks:
      - poce-network

  # Redis for caching and task queue
  redis:
    image: redis:7-alpine
    container_name: poce-redis
    restart: unless-stopped
    
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD:-defaultpassword}
    
    volumes:
      - redis-data:/data
      - ./redis/redis.conf:/usr/local/etc/redis/redis.conf:ro
    
    ports:
      - "6379:6379"
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 1G
        reservations:
          cpus: '0.1'
          memory: 128M
    
    networks:
      - poce-network

  # PostgreSQL for metadata storage
  postgres:
    image: postgres:15-alpine
    container_name: poce-postgres
    restart: unless-stopped
    
    environment:
      - POSTGRES_DB=${POSTGRES_DB:-poce}
      - POSTGRES_USER=${POSTGRES_USER:-poce}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-defaultpassword}
      - PGDATA=/var/lib/postgresql/data/pgdata
    
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    
    ports:
      - "5432:5432"
    
    deploy:
      resources:
        limits:
          cpus: '1.0'
          memory: 2G
        reservations:
          cpus: '0.2'
          memory: 256M
    
    networks:
      - poce-network

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: poce-prometheus
    restart: unless-stopped
    
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=30d'
      - '--web.enable-lifecycle'
    
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    
    ports:
      - "9090:9090"
    
    networks:
      - poce-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: poce-grafana
    restart: unless-stopped
    
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
    
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    
    ports:
      - "3000:3000"
    
    depends_on:
      - prometheus
    
    networks:
      - poce-network

  # Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: poce-nginx
    restart: unless-stopped
    
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx-logs:/var/log/nginx
    
    ports:
      - "80:80"
      - "443:443"
    
    depends_on:
      - poce-app
      - grafana
    
    networks:
      - poce-network

  # Development environment
  poce-dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    image: poce/project-creator:dev
    container_name: poce-dev
    
    environment:
      - POCE_MODE=development
      - GITHUB_TOKEN=${GITHUB_TOKEN}
      - DISPLAY=${DISPLAY:-:0}
    
    volumes:
      - .:/app/src:rw
      - ./config:/app/config
      - ./data:/app/data
      - ./logs:/app/logs
      - /tmp/.X11-unix:/tmp/.X11-unix:rw
    
    ports:
      - "8081:8080"
      - "5678:5678"  # Debug port
    
    networks:
      - poce-network
    
    profiles:
      - development

# Named volumes
volumes:
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  nginx-logs:
    driver: local

# Networks
networks:
  poce-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# ==========================================
# DOCKER ENTRYPOINT SCRIPT
# ==========================================
---
# docker/entrypoint.sh
#!/bin/bash
set -e

# P.O.C.E. Project Creator - Docker Entrypoint
# Handles initialization and startup for containerized deployment

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Logging function
log() {
    echo -e "${BLUE}[$(date +'%Y-%m-%d %H:%M:%S')] POCE:${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%Y-%m-%d %H:%M:%S')] ERROR:${NC} $1" >&2
}

success() {
    echo -e "${GREEN}[$(date +'%Y-%m-%d %H:%M:%S')] SUCCESS:${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date +'%Y-%m-%d %H:%M:%S')] WARNING:${NC} $1"
}

# Initialize application
initialize() {
    log "Initializing P.O.C.E. Project Creator v4.0..."
    
    # Create necessary directories
    mkdir -p "${POCE_DATA_PATH}/projects" \
             "${POCE_DATA_PATH}/templates" \
             "${POCE_DATA_PATH}/cache" \
             "${POCE_LOGS_PATH}" \
             "${POCE_CONFIG_PATH}"
    
    # Set permissions
    chmod 755 "${POCE_DATA_PATH}" "${POCE_LOGS_PATH}" "${POCE_CONFIG_PATH}"
    
    # Copy default configuration if not exists
    if [ ! -f "${POCE_CONFIG_PATH}/poce_config.yaml" ]; then
        log "Creating default configuration..."
        cp /app/config/poce_config.yaml "${POCE_CONFIG_PATH}/"
    fi
    
    # Validate environment variables
    validate_environment
    
    success "Initialization completed successfully"
}

# Validate required environment variables
validate_environment() {
    log "Validating environment configuration..."
    
    local required_vars=()
    local missing_vars=()
    
    # Check for critical environment variables
    if [ -z "$GITHUB_TOKEN" ]; then
        missing_vars+=("GITHUB_TOKEN")
    fi
    
    if [ ${#missing_vars[@]} -gt 0 ]; then
        error "Missing required environment variables: ${missing_vars[*]}"
        error "Please set these variables and restart the container"
        exit 1
    fi
    
    success "Environment validation passed"
}

# Wait for dependencies
wait_for_dependencies() {
    log "Waiting for dependencies..."
    
    # Wait for Redis
    if [ -n "$REDIS_HOST" ]; then
        log "Waiting for Redis at $REDIS_HOST:${REDIS_PORT:-6379}..."
        while ! nc -z "$REDIS_HOST" "${REDIS_PORT:-6379}"; do
            sleep 1
        done
        success "Redis is ready"
    fi
    
    # Wait for PostgreSQL
    if [ -n "$POSTGRES_HOST" ]; then
        log "Waiting for PostgreSQL at $POSTGRES_HOST:${POSTGRES_PORT:-5432}..."
        while ! nc -z "$POSTGRES_HOST" "${POSTGRES_PORT:-5432}"; do
            sleep 1
        done
        success "PostgreSQL is ready"
    fi
}

# Start application in GUI mode
start_gui() {
    log "Starting P.O.C.E. Project Creator in GUI mode..."
    
    # Check for X11 display
    if [ -z "$DISPLAY" ]; then
        warn "No DISPLAY environment variable set"
        warn "GUI mode may not work without X11 forwarding"
    fi
    
    # Start the GUI application
    exec python /app/poce_project_creator_v4.py
}

# Start application in headless mode
start_headless() {
    log "Starting P.O.C.E. Project Creator in headless mode..."
    
    # Use virtual display
    Xvfb :99 -screen 0 1024x768x24 &
    export DISPLAY=:99
    
    # Start the application
    exec python /app/poce_project_creator_v4.py --headless
}

# Start application in web mode
start_web() {
    log "Starting P.O.C.E. Project Creator in web mode..."
    
    # Start web interface
    exec python /app/poce_web_interface.py --host 0.0.0.0 --port 8080
}

# Start application in development mode
start_development() {
    log "Starting P.O.C.E. Project Creator in development mode..."
    
    # Install development dependencies if needed
    pip install -e /app/src[dev] || true
    
    # Start with auto-reload
    exec python -m debugpy --listen 0.0.0.0:5678 --wait-for-client /app/poce_project_creator_v4.py --debug
}

# Run maintenance tasks
run_maintenance() {
    log "Running maintenance tasks..."
    
    # Clean up old logs
    find "${POCE_LOGS_PATH}" -name "*.log" -mtime +30 -delete || true
    
    # Clean up cache
    find "${POCE_DATA_PATH}/cache" -mtime +7 -delete || true
    
    # Update MCP server cache
    python -c "
from src.mcp_manager import MCPServerManager
manager = MCPServerManager()
manager.refresh_server_cache()
" || warn "Failed to refresh MCP server cache"
    
    success "Maintenance tasks completed"
}

# Handle signals for graceful shutdown
cleanup() {
    log "Received termination signal, shutting down gracefully..."
    
    # Kill background processes
    jobs -p | xargs -r kill
    
    # Save any pending data
    python -c "
import sys
sys.path.append('/app')
from poce_project_creator_v4 import save_session
save_session()
" || true
    
    success "Cleanup completed"
    exit 0
}

# Set up signal handlers
trap cleanup SIGTERM SIGINT

# Main execution
main() {
    log "P.O.C.E. Project Creator Docker Container Starting..."
    log "Mode: ${1:-gui}"
    log "Version: $(python -c 'import sys; print(sys.version)' 2>/dev/null || echo 'Unknown')"
    
    # Initialize application
    initialize
    
    # Wait for dependencies
    wait_for_dependencies
    
    # Start application based on mode
    case "${1:-gui}" in
        "gui")
            start_gui
            ;;
        "headless")
            start_headless
            ;;
        "web")
            start_web
            ;;
        "development")
            start_development
            ;;
        "maintenance")
            run_maintenance
            ;;
        "bash")
            exec /bin/bash
            ;;
        *)
            error "Unknown mode: $1"
            error "Available modes: gui, headless, web, development, maintenance, bash"
            exit 1
            ;;
    esac
}

# Execute main function with all arguments
main "$@"

# ==========================================
# HEALTH CHECK SCRIPT
# ==========================================
---
# docker/healthcheck.sh
#!/bin/bash

# P.O.C.E. Project Creator - Health Check Script
# Validates container health and application status

set -e

# Configuration
HEALTH_CHECK_URL="http://localhost:8080/health"
TIMEOUT=10
MAX_RETRIES=3

# Colors
GREEN='\033[0;32m'
RED='\033[0;31m'
NC='\033[0m'

# Health check function
check_health() {
    local attempt=1
    
    while [ $attempt -le $MAX_RETRIES ]; do
        echo "Health check attempt $attempt of $MAX_RETRIES..."
        
        # Check if main process is running
        if pgrep -f "python.*poce_project_creator" > /dev/null; then
            echo -e "${GREEN}✓${NC} Main process is running"
        else
            echo -e "${RED}✗${NC} Main process not found"
            return 1
        fi
        
        # Check web interface if available
        if curl -f -s --connect-timeout $TIMEOUT "$HEALTH_CHECK_URL" > /dev/null 2>&1; then
            echo -e "${GREEN}✓${NC} Web interface is responding"
        else
            echo -e "${RED}✗${NC} Web interface check failed (attempt $attempt)"
            if [ $attempt -lt $MAX_RETRIES ]; then
                sleep 2
                ((attempt++))
                continue
            else
                return 1
            fi
        fi
        
        # Check memory usage
        local memory_usage=$(ps -o pid,ppid,cmd,%mem --sort=-%mem | grep python | head -1 | awk '{print $4}')
        if [ -n "$memory_usage" ]; then
            if (( $(echo "$memory_usage < 80" | bc -l) )); then
                echo -e "${GREEN}✓${NC} Memory usage OK ($memory_usage%)"
            else
                echo -e "${RED}✗${NC} High memory usage ($memory_usage%)"
                return 1
            fi
        fi
        
        # All checks passed
        echo -e "${GREEN}✓${NC} All health checks passed"
        return 0
    done
    
    return 1
}

# Run health check
if check_health; then
    exit 0
else
    echo -e "${RED}Health check failed${NC}"
    exit 1
fi